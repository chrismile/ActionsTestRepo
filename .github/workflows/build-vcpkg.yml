name: Build using vcpkg

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2022, macos-latest]

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}-${{ github.workflow }}

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
    - name: Set up vcpkg environment variables
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-linux" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-linux-release-only" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-windows" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-release-only" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-osx" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-osx-release-only" >> $GITHUB_ENV
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: lukka/get-cmake@latest

    - name: Install Vulkan SDK
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.204-focal.list https://packages.lunarg.com/vulkan/1.3.204/lunarg-vulkan-1.3.204-focal.list
          sudo apt update
          sudo apt install vulkan-sdk
          # Also install the dependencies for building GLEW here.
          sudo apt install libxmu-dev libxi-dev libgl-dev libglu1-mesa-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install vulkan-sdk
        elif [ "$RUNNER_OS" == "macOS" ]; then
          VULKAN_SDK_VERSION=1.3.204.1
          wget -qO https://sdk.lunarg.com/sdk/download/$VULKAN_SDK_VERSION/mac/vulkansdk-macos-$VULKAN_SDK_VERSION.dmg
          sudo ./InstallVulkan.app/Contents/MacOS/InstallVulkan --root ~/VulkanSDK/$VULKAN_SDK_VERSION --accept-licenses --default-answer --confirm-command install
          sudo ~/VulkanSDK/$VULKAN_SDK_VERSION/install_vulkan.py
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '1085a57da0725c19e19586025438e8c16f34c890'

    - name: Create custom vcpkg triplet
      run: |
        cp "${{env.VCPKG_ROOT}}/triplets/${{env.VCPKG_COPY_TRIPLET}}.cmake" "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
        echo "set(VCPKG_BUILD_TYPE release)" >> "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"

    #- name: Configure CMake
    #  shell: bash
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #  run: |
    #    cmake -B "${{github.workspace}}/build" -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVCPKG_TARGET_TRIPLET=${{env.VCPKG_DEFAULT_TRIPLET}}

    #- name: Build
    #  run: cmake --build "${{github.workspace}}/build" --config ${{env.BUILD_TYPE}}

    - name: Remove symbolic links before caching (Windows only)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        find "${{env.VCPKG_ROOT}}/buildtrees" -type l -exec echo {} \;
        find "${{env.VCPKG_ROOT}}/buildtrees" -type l -exec rm {} \;
