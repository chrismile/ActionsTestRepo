name: Build using vcpkg

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]

    runs-on: ${{ matrix.os }}
    name: "${{ github.workflow }}: ${{ matrix.os }}"

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      sgl_REPO_DIR: ${{ github.workspace }}/sgl-repo
      sgl_DIR: ${{ github.workspace }}/sgl

    steps:
    - name: Set up vcpkg environment variables
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-linux" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-linux-release-only" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-windows" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-release-only" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-osx" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-osx-release-only" >> $GITHUB_ENV
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: actions/checkout@v2
      with:
        repository: chrismile/sgl
        path: sgl-repo
        submodules: true

    - uses: lukka/get-cmake@latest

    - name: Install Vulkan SDK
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.204-focal.list https://packages.lunarg.com/vulkan/1.3.204/lunarg-vulkan-1.3.204-focal.list
          sudo apt update
          sudo apt install vulkan-sdk
          # Also install the dependencies for building GLEW here.
          sudo apt install libxmu-dev libxi-dev libgl-dev libglu1-mesa-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install vulkan-sdk
        elif [ "$RUNNER_OS" == "macOS" ]; then
          VULKAN_SDK_VERSION=1.3.204.1
          curl -O https://sdk.lunarg.com/sdk/download/$VULKAN_SDK_VERSION/mac/vulkansdk-macos-$VULKAN_SDK_VERSION.dmg
          sudo hdiutil attach vulkansdk-macos-$VULKAN_SDK_VERSION.dmg
          sudo /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION/InstallVulkan.app/Contents/MacOS/InstallVulkan \
          --root ~/VulkanSDK/$VULKAN_SDK_VERSION --accept-licenses --default-answer --confirm-command install
          cd ~/VulkanSDK/$VULKAN_SDK_VERSION
          sudo ./install_vulkan.py
          sudo hdiutil unmount /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION
          brew install llvm
          brew install libomp
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: 'be5c4ef68b51142ba705f0678b45d284977de677'
        #doNotCacheOnWorkflowFailure: true

    - name: Create custom vcpkg triplet
      run: |
        cp "${{env.VCPKG_ROOT}}/triplets/${{env.VCPKG_COPY_TRIPLET}}.cmake" "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
        echo "set(VCPKG_BUILD_TYPE release)" >> "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"

    - name: Configure CMake (sgl)
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          export VULKAN_SDK="/usr"
        elif [ "$RUNNER_OS" == "Windows" ]; then
          export VULKAN_SDK="C:/VulkanSDK/$(ls C:/VulkanSDK)"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          source "$HOME/VulkanSDK/$(ls $HOME/VulkanSDK)/setup-env.sh"
        fi
        cmake "${{env.sgl_REPO_DIR}}" -B "${{env.sgl_REPO_DIR}}/build" -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVCPKG_TARGET_TRIPLET=${{env.VCPKG_DEFAULT_TRIPLET}} -DCMAKE_INSTALL_PREFIX="${{env.sgl_DIR}}"

    - name: Build (sgl)
      run: cmake --build ${{env.sgl_REPO_DIR}}/build --config ${{env.BUILD_TYPE}} --parallel 4

    - name: Install (sgl)
      run: cmake --build ${{env.sgl_REPO_DIR}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Configure CMake (CloudRendering)
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          export VULKAN_SDK="/usr"
        elif [ "$RUNNER_OS" == "Windows" ]; then
          export VULKAN_SDK="C:/VulkanSDK/$(ls C:/VulkanSDK)"
        fi
        cmake -B "${{github.workspace}}/build" -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVCPKG_TARGET_TRIPLET=${{env.VCPKG_DEFAULT_TRIPLET}} -Dsgl_DIR=${{env.sgl_DIR}}/lib/cmake/sgl

    - name: Build (CloudRendering)
      run: cmake --build "${{github.workspace}}/build" --config ${{env.BUILD_TYPE}} --parallel 4

    - name: Remove symbolic links before caching (Windows only)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        find "${{env.VCPKG_ROOT}}/buildtrees" -type l -exec echo {} \;
        find "${{env.VCPKG_ROOT}}/buildtrees" -type l -exec rm {} \;
