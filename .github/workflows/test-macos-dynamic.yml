name: Test macOS dynamic build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]
        linking: [ dynamic ]

    runs-on: ${{ matrix.os }}
    name: "${{ github.workflow }}: ${{ matrix.os }} (${{ matrix.linking }})"

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
    - name: Set up vcpkg
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT
        "$VCPKG_ROOT/bootstrap-vcpkg.sh" -disableMetrics
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-linux" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-linux-${{matrix.linking}}-release-only" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-windows" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-${{matrix.linking}}-release-only" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "VCPKG_COPY_TRIPLET=x64-osx" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-osx-${{matrix.linking}}-release-only" >> $GITHUB_ENV
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - name: Install Vulkan SDK
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          vulkansdk_filename=$(curl -sIkL https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg | sed -r '/filename=/!d;s/.*filename=(.*)$/\1/')
          VULKAN_SDK_VERSION=$(echo $vulkansdk_filename | sed -r 's/^.*vulkansdk-macos-(.*)\.dmg.*$/\1/')
          curl -O https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg
          sudo hdiutil attach vulkan-sdk.dmg
          sudo /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION/InstallVulkan.app/Contents/MacOS/InstallVulkan \
          --root ~/VulkanSDK/$VULKAN_SDK_VERSION --accept-licenses --default-answer --confirm-command install
          cd ~/VulkanSDK/$VULKAN_SDK_VERSION
          sudo ./install_vulkan.py || true
          sudo hdiutil unmount /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION
          brew install llvm
          brew install libomp
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - name: Create custom vcpkg triplet
      shell: bash
      run: |
        cp "${{env.VCPKG_ROOT}}/triplets/${{env.VCPKG_COPY_TRIPLET}}.cmake" "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
        echo "set(VCPKG_BUILD_TYPE release)" >> "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
        sed -i -e 's/.*VCPKG_LIBRARY_LINKAGE.*/set(VCPKG_LIBRARY_LINKAGE ${{matrix.linking}})/g' "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
        if [ "$RUNNER_OS" == "Linux" ] && [ "${{matrix.linking}}" == "dynamic" ]; then
            echo "set(VCPKG_FIXUP_ELF_RPATH ON)" >> "${{env.VCPKG_ROOT}}/triplets/community/${{env.VCPKG_DEFAULT_TRIPLET}}.cmake"
        fi

    - name: Install vcpkg ports
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          if [ "${{env.PKG_CONFIG_PATH}}" != "" ]; then
            VK_LAYER_PATH=""
            source "VulkanSDK/$(ls VulkanSDK)/setup-env.sh"
            export PKG_CONFIG_PATH="${{env.PKG_CONFIG_PATH}}"
          else
            export VULKAN_SDK="/usr"
          fi
        elif [ "$RUNNER_OS" == "Windows" ]; then
          export VULKAN_SDK="C:/VulkanSDK/$(ls C:/VulkanSDK)"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          source "$HOME/VulkanSDK/$(ls $HOME/VulkanSDK)/setup-env.sh"
        fi
        cp "$VCPKG_ROOT/triplets/x64-linux.cmake" "$VCPKG_ROOT/triplets/x64-linux-dynamic.cmake"
        sed -i -e 's/VCPKG_LIBRARY_LINKAGE static/VCPKG_LIBRARY_LINKAGE dynamic/g' "$VCPKG_ROOT/triplets/x64-linux-dynamic.cmake"
        "$VCPKG_ROOT/vcpkg" install --triplet=${{env.VCPKG_DEFAULT_TRIPLET}} boost-core boost-algorithm boost-filesystem boost-locale libpng sdl2[vulkan] tinyxml2 glew glm libarchive libarchive[bzip2,core,lz4,lzma,zstd] vulkan vulkan-headers shaderc eigen3 jsoncpp python3 cppzmq netcdf-c openexr
        # TODO: SDL2_image

    - name: Check build logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: fail-logs
        path: /Users/runner/work/ActionsTestRepo/ActionsTestRepo/vcpkg/buildtrees/sdl2-image/install-x64-osx-release-only-rel-out.log
