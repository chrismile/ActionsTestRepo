name: Build on Ubuntu

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2022 ]

    runs-on: ${{ matrix.os }}
    name: "Build on ${{ matrix.os }}"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install Vulkan SDK
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          distro_code_name="$(lsb_release -c | grep -oP "\:\s+\K\S+")"
          os_arch="$(uname -m)"
          if ! curl -s -I "https://packages.lunarg.com/vulkan/dists/{distro_code_name}/" | grep "2 404" > /dev/null; then
            wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
            sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${distro_code_name}.list \
            https://packages.lunarg.com/vulkan/lunarg-vulkan-${distro_code_name}.list
            sudo apt update
            sudo apt install vulkan-sdk
          else
            curl --silent --show-error --fail -O https://sdk.lunarg.com/sdk/download/latest/linux/vulkan-sdk.tar.gz
            mkdir -p VulkanSDK
            tar -xzf vulkan-sdk.tar.gz -C VulkanSDK
            # Fix pkgconfig file.
            shaderc_pkgconfig_file="VulkanSDK/$(ls VulkanSDK)/$os_arch/lib/pkgconfig/shaderc.pc"
            prefix_path=$(realpath "VulkanSDK/$(ls VulkanSDK)/$os_arch")
            sed -i '3s;.*;prefix=\"'$prefix_path'\";' "$shaderc_pkgconfig_file"
            sed -i '5s;.*;libdir=${prefix}/lib;' "$shaderc_pkgconfig_file"
            echo "PKG_CONFIG_PATH=\"$(realpath "VulkanSDK/$(ls VulkanSDK)/$os_arch/lib/pkgconfig")\"" >> $GITHUB_ENV
          fi
          # Also install the dependencies for building GLEW here.
          sudo apt install libxmu-dev libxi-dev libgl-dev libglu1-mesa-dev
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Chocolatey is broken as of 2023-07-07
          #choco install vulkan-sdk
          curl -O https://sdk.lunarg.com/sdk/download/1.3.250.1/windows/VulkanSDK-1.3.250.1-Installer.exe
          #wget https://sdk.lunarg.com/sdk/download/1.3.250.1/windows/VulkanSDK-1.3.250.1-Installer.exe
          ./VulkanSDK-1.3.250.1-Installer.exe --accept-licenses --default-answer --confirm-command install
        elif [ "$RUNNER_OS" == "macOS" ]; then
          vulkansdk_filename=$(curl -sIkL https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg | sed -r '/filename=/!d;s/.*filename=(.*)$/\1/')
          VULKAN_SDK_VERSION=$(echo $vulkansdk_filename | sed -r 's/^.*vulkansdk-macos-(.*)\.dmg.*$/\1/')
          curl -O https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg
          sudo hdiutil attach vulkan-sdk.dmg
          #sudo /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION/InstallVulkan.app/Contents/MacOS/InstallVulkan \
          sudo /Volumes/VulkanSDK/InstallVulkan.app/Contents/MacOS/InstallVulkan \
          --root ~/VulkanSDK/$VULKAN_SDK_VERSION --accept-licenses --default-answer --confirm-command install
          cd ~/VulkanSDK/$VULKAN_SDK_VERSION
          sudo ./install_vulkan.py || true
          sudo hdiutil unmount /Volumes/VulkanSDK
          brew install llvm libomp pkg-config
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi
