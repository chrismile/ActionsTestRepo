name: Build using Homebrew

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, macos-latest ]

    runs-on: ${{ matrix.os }}
    name: "${{ github.workflow }}: ${{ matrix.os }}"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    #- uses: lukka/get-cmake@latest

    - name: Install Dependencies via Homebrew
      shell: bash
      run: |
        # Normally, we would first do here: apt install curl,
        # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        # https://stackoverflow.com/questions/25128546/how-to-automate-homebrew-installation
        if [ "$RUNNER_OS" == "Linux" ]; then
          brew install gcc
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install llvm libomp
          brew install molten-vk
          # xcode-select: error: command line tools are already installed, use "Software Update" to install updates
          #xcode-select --install
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi
        #brew install vulkan-headers
        brew install cmake zlib libpng glm sdl2 sdl2_image libarchive boost tinyxml2

    - name: Install Vulkan SDK
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          distro_code_name=$(lsb_release -c | grep -oP "\:\s+\K\S+")
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${distro_code_name}.list https://packages.lunarg.com/vulkan/lunarg-vulkan-${distro_code_name}.list
          sudo apt update
          sudo apt install vulkan-sdk shaderc
        elif [ "$RUNNER_OS" == "macOS" ]; then
          VULKAN_SDK_VERSION=1.3.204.1
          #curl -O https://sdk.lunarg.com/sdk/download/$VULKAN_SDK_VERSION/mac/vulkansdk-macos-$VULKAN_SDK_VERSION.dmg
          #sudo hdiutil attach vulkansdk-macos-$VULKAN_SDK_VERSION.dmg
          #sudo /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION/InstallVulkan.app/Contents/MacOS/InstallVulkan \
          #--root ~/VulkanSDK/$VULKAN_SDK_VERSION --accept-licenses --default-answer --confirm-command install
          #cd ~/VulkanSDK/$VULKAN_SDK_VERSION
          #sudo ./install_vulkan.py
          #sudo hdiutil unmount /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - name: Print Directories
      shell: bash
      run: |
        echo "PRINT ."
        ls "$(brew --prefix)"
        echo "PRINT lib"
        ls "$(brew --prefix)/lib"
        echo "PRINT share"
        ls "$(brew --prefix)/share"
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "PRINT share/cmake"
          ls "$(brew --prefix)/share/cmake"
          echo "PRINT lib/cmake"
          ls "$(brew --prefix)/lib/cmake"
          echo "PRINT /usr/local/opt/zlib"
          ls /usr/local/opt/zlib
        fi
        which cmake
        cmake --version

    - name: Configure CMake
      shell: bash
      run: |
        #export VULKAN_SDK="$(brew --prefix)"
        params=()
        if [ "$RUNNER_OS" == "Linux" ]; then
          export VULKAN_SDK="/usr"
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          #source "$HOME/VulkanSDK/$(ls $HOME/VulkanSDK)/setup-env.sh"
          export VULKAN_SDK="/usr/local"
          export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"
          params+=(-DZLIB_ROOT="/usr/local/opt/zlib" -DVulkan_LIBRARY=/usr/local/lib/libvulkan.dylib -DVulkan_INCLUDE_DIR=/usr/local/include)
          #params+=(-DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH=False -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=False -DCMAKE_FIND_FRAMEWORK=Last -DCMAKE_FIND_APPBUNDLE=Never -DZLIB_ROOT="/usr/local/opt/zlib")
        fi
        cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="$(brew --prefix)" "${params[@]}"

    - name: Build
      run: cmake --build "${{github.workspace}}/build" --config ${{env.BUILD_TYPE}} --parallel 4
