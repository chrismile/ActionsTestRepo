name: Build using Homebrew

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, macos-latest ]

    runs-on: ${{ matrix.os }}
    name: "${{ github.workflow }}: ${{ matrix.os }}"

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    #- uses: lukka/get-cmake@latest

    - name: Install Dependencies
      shell: bash
      run: |
        # Normally, we would first do here: apt install curl,
        # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        # https://stackoverflow.com/questions/25128546/how-to-automate-homebrew-installation
        if [ "$RUNNER_OS" == "Linux" ]; then
          brew install gcc
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install llvm libomp molten-vk
          # xcode-select: error: command line tools are already installed, use "Software Update" to install updates
          #xcode-select --install
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi
        brew install cmake zlib libpng glm sdl2 sdl2_image libarchive boost tinyxml2

    - name: Print Directories
      shell: bash
      run: |
        echo "PRINT /usr/local/opt/zlib"
        ls /usr/local/opt/zlib
        echo "PRINT ."
        ls "$(brew --prefix)"
        echo "PRINT lib"
        ls "$(brew --prefix)/lib"
        echo "PRINT share"
        ls "$(brew --prefix)/share"
        echo "PRINT share/cmake"
        ls "$(brew --prefix)/share/cmake"
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "PRINT lib/cmake"
          ls "$(brew --prefix)/lib/cmake"
        fi

    - name: Configure CMake
      shell: bash
      run: |
        export VULKAN_SDK="$(brew --prefix)"
        #if [ "$RUNNER_OS" == "Linux" ]; then
        #  export VULKAN_SDK="/usr"
        #elif [ "$RUNNER_OS" == "Windows" ]; then
        #  export VULKAN_SDK="C:/VulkanSDK/$(ls C:/VulkanSDK)"
        #elif [ "$RUNNER_OS" == "macOS" ]; then
        #  source "$HOME/VulkanSDK/$(ls $HOME/VulkanSDK)/setup-env.sh"
        #fi
        params=()
        if [ "$RUNNER_OS" == "macOS" ]; then
          params+=(-DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=False -DCMAKE_FIND_FRAMEWORK=Last -DCMAKE_FIND_APPBUNDLE=Never) -DZLIB_ROOT="/usr/local/opt/zlib"
        fi
        cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="$(brew --prefix)" -DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH=False
        #-DZLIB_ROOT="$(brew --prefix)" "${params[@]}"

    - name: Build
      run: cmake --build "${{github.workspace}}/build" --config ${{env.BUILD_TYPE}} --parallel 4
